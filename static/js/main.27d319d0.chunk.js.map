{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Menu","React","lazy","Promise","all","e","then","bind","Header","Content","Quotes","Timeline","MyGoal","Footer","App","document","title","setTimeout","Fingerprint2","get","components","console","log","values","map","component","value","murmur","x64hash128","join","react_default","a","createElement","className","Suspense","fallback","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.27d319d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport Fingerprint2 from 'fingerprintjs2';\nimport './style/main.scss';\n\nconst Menu = React.lazy(() => import('./components/menu/Menu'));\nconst Header = React.lazy(() => import('./components/header/Header'));\nconst Content = React.lazy(() => import('./components/content/Content'));\nconst Quotes = React.lazy(() => import('./components/quotes/Quotes'));\nconst Timeline = React.lazy(() => import('./components/timeline/Timeline'));\nconst MyGoal = React.lazy(() => import('./components/mygoal/MyGoal'));\nconst Footer = React.lazy(() => import('./components/footer/Footer'));\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = 'Fadli Muharram Portofolio';\n    setTimeout(function() {\n      Fingerprint2.get(function(components) {\n        console.log(components); // an array of components: {key: ..., value: ...}\n        var values = components.map(function(component) {\n          return component.value;\n        });\n        var murmur = Fingerprint2.x64hash128(values.join(''), 31);\n        console.log(murmur);\n      });\n    }, 2000);\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <React.Suspense fallback={<div>Loading...</div>}>\n          <Menu />\n          <Header />\n          <Content />\n          <Quotes />\n          <Timeline />\n          <MyGoal />\n          <Footer />\n        </React.Suspense>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}